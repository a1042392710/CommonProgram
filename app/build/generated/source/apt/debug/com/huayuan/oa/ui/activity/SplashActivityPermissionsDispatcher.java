// This file was generated by PermissionsDispatcher. Do not modify!
package com.huayuan.oa.ui.activity;

import android.support.v4.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class SplashActivityPermissionsDispatcher {
  private static final int REQUEST_GETPERMISSIONS = 0;

  private static final String[] PERMISSION_GETPERMISSIONS = new String[] {"android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_PHONE_STATE","android.permission.ACCESS_FINE_LOCATION"};

  private SplashActivityPermissionsDispatcher() {
  }

  static void getPermissionsWithCheck(SplashActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_GETPERMISSIONS)) {
      target.getPermissions();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_GETPERMISSIONS)) {
        target.showRationale(new GetPermissionsPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_GETPERMISSIONS, REQUEST_GETPERMISSIONS);
      }
    }
  }

  static void onRequestPermissionsResult(SplashActivity target, int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_GETPERMISSIONS:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_GETPERMISSIONS)) {
        target.multiDenied();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.getPermissions();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_GETPERMISSIONS)) {
          target.multiNeverAsk();
        } else {
          target.multiDenied();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class GetPermissionsPermissionRequest implements PermissionRequest {
    private final WeakReference<SplashActivity> weakTarget;

    private GetPermissionsPermissionRequest(SplashActivity target) {
      this.weakTarget = new WeakReference<SplashActivity>(target);
    }

    @Override
    public void proceed() {
      SplashActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_GETPERMISSIONS, REQUEST_GETPERMISSIONS);
    }

    @Override
    public void cancel() {
      SplashActivity target = weakTarget.get();
      if (target == null) return;
      target.multiDenied();
    }
  }
}
